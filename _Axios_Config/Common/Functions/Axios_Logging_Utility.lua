------------------------------------------------------------------------------------------
-- Send_Email_Utility.lua

-- add to other aLua logic files to send emails on errors
-- assumes calling aLua file has processed BaseConfig.lua
-- Note: strSMTPServer entry must now be included in the BaseConfig.lua file

------------------------------------------------------------------------------------------

-- set the email body text here --

EMAIL_BODY = [[
Dear assyst Administrator,

On %date the Axios utility ']] .. strUtilityName .. [[' encountered an %level condition.  The cause is stated below: 

%message

If you want to raise an incident with Axios support, you will need to include the complete log file ]] .. string.gsub(strUtilityName," ","_") .. "_log.txt" .. [[ generated by this program. This file can be found on the installation machine in the folder ']] .. (strBASE_FOLDER or "/_Axios_Config/") .. [[Logs'. Please ZIP this log file and provide the ZIP file when raising the incident. 

]]		

---- DO NOT EDIT BELOW THIS LINE ----

require "lfs"
require "socket"
require "logging.file"
require "logging.console"
require "logging.email"
require "logging.windows_event_log"
require "logging.combine"
DEBUG, INFO, WARN, ERROR, FATAL =
		logging.DEBUG, logging.INFO, logging.WARN, logging.ERROR, logging.FATAL

assert( os.setlocale(""), "Could not set User Locale." )
assert( os.setlocale("C", "numeric"), "Could not set C locale for numbers!" )

UtilityDir = lfs.currentdir() .. "\\"
--local LogDir = lfs.currentdir() .. "\\Logs"
local LogDir = strBASE_FOLDER .. "Logs"
print("LOGGING DIRECTORY: " .. LogDir)
local LogFile = string.gsub(strUtilityName," ","_") .. "_log.txt"
ChgDir,err = lfs.chdir(LogDir)
	if not ChgDir then
		MkDir, err = lfs.mkdir(LogDir)
		if not MkDir then 
			os.exit(-2) 
		else
			print("Directory " .. LogDir .. " created")
		end
	else 
		ChgDir,err = lfs.chdir("..")
	end
FILELOGGER = assert(logging.file(LogDir .. "\\" .. LogFile))
FILELOGGER:setLevel(string.upper(LOG_LEVEL or "INFO"))

ROOT = lfs.currentdir():gsub("\\", "/")
HOST = socket.dns.gethostname()
NTLOGGER = nil
EMAILLOGGER = nil

CONSOLELOGGER = assert( logging.console("%level: Axios Utility '" .. strUtilityName .. "': %message\n.\n") )
CONSOLELOGGER:setLevel(logging.DEBUG)


function windows_event_log(args)
	if not args or type(args) ~= "table"  then
		error("Invalid 'windows_event_log' entry (table expected).", 2)
	end
	if args.source and type(args.source) ~= "string" then
		error("Invalid windows_event_log 'source' entry (string expected).", 2)
	end
	if args.loglevel and not element(args.loglevel, {DEBUG, INFO, WARN, ERROR, FATAL}) then
		error("Invalid windows_event_log 'loglevel' entry (one of DEBUG, INFO, WARN, ERROR, or FATAL expected).", 2)
	end

	NTLOGGER = assert( logging.windows_event_log(args.source) )
	NTLOGGER:setLevel(args.loglevel or ERROR)
end


function email_log(args)
	if args.loglevel and not element(args.loglevel, {DEBUG, INFO, WARN, ERROR, FATAL}) then
		error("Invalid email_log 'loglevel' entry (one of DEBUG, INFO, WARN, ERROR, or FATAL expected).", 2)
	end
	if not args.server then
		error("Missing email_log 'server' configuration entry (string expected).", 2)
	end
	if type(args.server) ~= "string" then
		error("Invalid email_log 'server' configuration entry (string expected).", 2)
	end
	if not args.sender then
		error("Missing email_log 'sender' configuration entry (string expected).", 2)
	end
	if type(args.sender) ~= "string" then
		error("Invalid email_log 'sender' configuration entry (string expected).", 2)
	end
	if not args.recipients then
		error("Missing email_log 'recipients' configuration entry (string expected).", 2)
	end
	if not (type(args.recipients) == "string" or
			type(args.recipients) == "table") then
		error("Invalid email_log 'recipients' configuration entry (string or table expected).", 2)
	end
	if type(args.recipients) ~= "table" then
		for i, r in ipairs(args.recipients) do
			if type(r) ~= "string" then
				error("Invalid email_log 'recipients' configuration entry #" .. i .. " (string expected).", 2)
			end
		end
	end

	if args.port and type(args.port) ~= "number" then
		error("Invalid email_log 'port' configuration entry (number expected).", 2)
	end
	if args.user and type(args.user) ~= "string" then
		error("Invalid email_log 'user' configuration entry (string expected).", 2)
	end
	if args.password and type(args.password) ~= "string" then
		error("Invalid email_log 'password' configuration entry (string expected).", 2)
	end
	if args.domain and type(args.domain) ~= "string" then
		error("Invalid email_log 'domain' configuration entry (string expected).", 2)
	end

	local log_string
	if args.body then
		if type(args.body) ~= "string" then
			error("Invalid email_log 'body' configuration entry (string expected).", 2)
		else
			if EMAIL_BODY and type(EMAIL_BODY) == "string" then
				log_string = EMAIL_BODY
			end
		end
		-- if not file_exists(args.body) then
			-- error("Invalid email_log 'body' configuration entry (valid file name expected).", 2)
		-- end
		-- log_string = read_file(args.body)
	elseif _DEFAULT_BODY and file_exists(_DEFAULT_BODY) then
		log_string = read_file(_DEFAULT_BODY)
	else
			if not file_exists(args.body) then
				error("Invalid email_log 'body' configuration entry (valid file name expected).", 2)
			end
			log_string = read_file(args.body)
	end
	if args.header and type(args.header) ~= "table" then
		error("Invalid email_log 'header' configuration entry (table expected).", 2)
	end
	local headers = {
		from = "Axios Utility '" .. strUtilityName .. "'",
		to = "Axios Utility '" .. strUtilityName .. "' Administrator",
		subject = "Axios Utility '" .. strUtilityName .. "' %level Alert",
		["content-type"] = "text/plain; charset=utf-8",
	}
	if args.header then
		for k, v in pairs(args.header) do
			if type(k) ~= "string" then
				error("Invalid email_log 'header' configuration key '" .. stringify_flat(k) .. "'.", 2)
			end
			if type(v) ~= "string" then
				error("Invalid email_log 'header' configuration value for '" .. k .. "' (string expected).", 2)
			end
			headers[k] = v:gsub("%%(%a+)", {name=strUtilityName, host=HOST, logfolder=LogDir,
					date="%date", level="%level", message="%message"})
		end
	end

	local log = {
		from = args.sender,
		rcpt = args.recipients,
		user = args.user,
		password = args.password,
		server = args.server,
		port = args.port,
		domain = args.domain,
		headers = headers,
	}
	if log_string then
		log.logPattern = log_string:gsub("%%(%a+)", {name=strUtilityName, host=HOST, logfolder=LogDir,
			date="%date", level="%level", message="%message"})
	end

	EMAILLOGGER = assert( logging.email(log) )
	EMAILLOGGER:setLevel(args.loglevel or ERROR)
end


windows_event_log {
	source = (strUtilityName or "Axios Lua Utility"),
}

email_log {
	server = strSMTPServer,
--	port = strSMTPPort or 25,
	sender = strServiceDeskEmail,
--	user = "...",
--	password = "...",
	recipients = {
		(strAdminEmail or "phil.trant@axiossystems.com"),
	},
	header = {
		from = "Axios Utility - " .. strUtilityName,
		to = strAdminEmailName or "Axios Utility Administrator",
		subject = "Axios Utility - " .. strUtilityName .. " %level Alert",
	},
	body = EMAIL_BODY
}


if NTLOGGER and EMAILLOGGER and FILELOGGER then
	CONSOLELOGGER:info("Using Event, Email, File, and Console alert notifications.")
	LOGGER = assert( logging.combine{ NTLOGGER, EMAILLOGGER, CONSOLELOGGER, FILELOGGER } )
elseif NTLOGGER and EMAILLOGGER then
	CONSOLELOGGER:info("Using Event, Email and Console alert notifications.")
	LOGGER = assert( logging.combine{ NTLOGGER, EMAILLOGGER, CONSOLELOGGER } )
elseif NTLOGGER then
	CONSOLELOGGER:info("Using only Event and Console alert notifications.")
	LOGGER = assert( logging.combine{ NTLOGGER, CONSOLELOGGER } )
elseif EMAILLOGGER and FILELOGGER then
	CONSOLELOGGER:info("Using Email, File, and Console alert notifications.")
	LOGGER = assert( logging.combine{ CONSOLELOGGER, EMAILLOGGER, FILELOGGER } )
elseif EMAILLOGGER then
	CONSOLELOGGER:info("Using only Email and Console alert notifications.")
	LOGGER = assert( logging.combine{ CONSOLELOGGER, EMAILLOGGER} )
else
	CONSOLELOGGER:info("Using no alert notifications.")
	LOGGER = CONSOLELOGGER
end
